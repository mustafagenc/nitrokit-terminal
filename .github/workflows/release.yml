name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: nitrokit
            asset_name: nitrokit-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: nitrokit.exe
            asset_name: nitrokit-windows-x86_64.exe
          - os: macos-13  # Intel macOS
            target: x86_64-apple-darwin
            binary_name: nitrokit
            asset_name: nitrokit-macos-x86_64
          - os: macos-14  # Apple Silicon macOS (M1/M2)
            target: aarch64-apple-darwin
            binary_name: nitrokit
            asset_name: nitrokit-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      # RustTLS kullandığımız için OpenSSL kurulumuna gerek yok
      - name: Install build dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
          chmod +x ${{ matrix.asset_name }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\${{ matrix.binary_name }} ${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}
          if-no-files-found: error
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to root and debug
        run: |
          echo "=== Artifact directory structure ==="
          find artifacts -type f -name "*" | head -20
          
          echo "=== Moving artifacts ==="
          # Her artifact kendi klasöründe
          find artifacts -type f -name "nitrokit-*" -exec cp {} . \;
          
          echo "=== Files in current directory ==="
          ls -la nitrokit-* || echo "No nitrokit files found"
          
          echo "=== All files in artifacts directory ==="
          find artifacts -name "*nitrokit*" -type f

      - name: Verify artifacts exist
        run: |
          REQUIRED_FILES=(
            "nitrokit-linux-x86_64"
            "nitrokit-windows-x86_64.exe"
            "nitrokit-macos-x86_64"
            "nitrokit-macos-arm64"
          )
          
          MISSING_FILES=()
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done
          
          if [ ${#MISSING_FILES[@]} -ne 0 ]; then
            echo "❌ Missing files: ${MISSING_FILES[*]}"
            echo "Available files:"
            ls -la
            exit 1
          else
            echo "✅ All required files found"
            ls -la nitrokit-*
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          {
            echo "RELEASE_NOTES<<EOF"
            echo "## 🚀 What's New in ${{ github.ref_name }}"
            echo ""
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "### 📝 Changes since $PREVIOUS_TAG"
              git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges | head -20
            else
              echo "### 📝 Initial Release"
              git log --pretty=format:"- %s" --no-merges | head -10
            fi
            echo ""
            echo ""
            echo "## 📥 Downloads"
            echo ""
            echo "| Platform | Download |"
            echo "|----------|----------|"
            echo "| Windows (x64) | [\`nitrokit-windows-x86_64.exe\`](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/nitrokit-windows-x86_64.exe) |"
            echo "| macOS (Intel) | [\`nitrokit-macos-x86_64\`](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/nitrokit-macos-x86_64) |"
            echo "| macOS (Apple Silicon) | [\`nitrokit-macos-arm64\`](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/nitrokit-macos-arm64) |"
            echo "| Linux (x64) | [\`nitrokit-linux-x86_64\`](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/nitrokit-linux-x86_64) |"
            echo ""
            echo "## 🛠️ Installation"
            echo ""
            echo "### Quick Install Script"
            echo "\`\`\`bash"
            echo "curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash"
            echo "\`\`\`"
            echo ""
            echo "### Manual Download"
            echo "\`\`\`bash"
            echo "# Linux/macOS"
            echo "wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/nitrokit-\$(uname -s | tr '[:upper:]' '[:lower:]')-\$(uname -m)"
            echo "chmod +x nitrokit-*"
            echo "sudo mv nitrokit-* /usr/local/bin/nitrokit"
            echo "\`\`\`"
            echo ""
            echo "### Using Cargo"
            echo "\`\`\`bash"
            echo "cargo install nitrokit"
            echo "\`\`\`"
            echo ""
            echo "## 🚀 Usage"
            echo ""
            echo "\`\`\`bash"
            echo "# Interactive mode"
            echo "nitrokit"
            echo ""
            echo "# Direct commands"
            echo "nitrokit release-notes"
            echo "nitrokit create-release patch"
            echo "nitrokit sync-translations"
            echo "\`\`\`"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "🚀 NitroKit ${{ github.ref_name }}"
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          files: |
            nitrokit-linux-x86_64
            nitrokit-windows-x86_64.exe
            nitrokit-macos-x86_64
            nitrokit-macos-arm64
          generate_release_notes: false
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}