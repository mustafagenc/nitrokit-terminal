name: Rust CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Update Cargo.lock if needed
      run: |
        # Remove Cargo.lock and regenerate it to ensure compatibility
        if [ -f Cargo.lock ]; then
          echo "Regenerating Cargo.lock for compatibility..."
          rm Cargo.lock
          cargo generate-lockfile
        fi

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
          ${{ runner.os }}-cargo-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y git pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Git version: $(git --version)"

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Check documentation
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo doc --no-deps --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Update Cargo.lock if needed
      run: |
        if [ -f Cargo.lock ]; then
          rm Cargo.lock
          cargo generate-lockfile
        fi

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.toml') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit --locked

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Update Cargo.lock if needed
      run: |
        if [ -f Cargo.lock ]; then
          rm Cargo.lock
          cargo generate-lockfile
        fi

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git pkg-config libssl-dev

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin --locked

    - name: Run tests with coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: cobertura.xml
        flags: unittests
        name: nitrokit-coverage
        fail_ci_if_error: false

  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Update Cargo.lock if needed
      run: |
        if [ -f Cargo.lock ]; then
          rm Cargo.lock
          cargo generate-lockfile
        fi

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-lint-${{ hashFiles('**/Cargo.toml') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Update Cargo.lock if needed
      run: |
        if [ -f Cargo.lock ]; then
          rm Cargo.lock
          cargo generate-lockfile
        fi

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git pkg-config libssl-dev

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.toml') }}

    - name: Build release
      run: cargo build --release --verbose

    - name: Check package
      run: cargo package --verbose

    - name: Dry run publish
      run: cargo publish --dry-run --verbose

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain (MSRV)
      uses: dtolnay/rust-toolchain@1.70.0

    - name: Update Cargo.lock if needed
      run: |
        if [ -f Cargo.lock ]; then
          rm Cargo.lock
          cargo generate-lockfile
        fi

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git pkg-config libssl-dev

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-msrv-${{ hashFiles('**/Cargo.toml') }}

    - name: Check build with MSRV
      run: cargo build --verbose

    - name: Check tests with MSRV
      run: cargo test --verbose

  final-check:
    name: Final Check
    runs-on: ubuntu-latest
    needs: [test, security, coverage, lint, build, msrv]
    if: always()
    steps:
    - name: Check results
      run: |
        echo "Test result: ${{ needs.test.result }}"
        echo "Security result: ${{ needs.security.result }}"
        echo "Coverage result: ${{ needs.coverage.result }}"
        echo "Lint result: ${{ needs.lint.result }}"
        echo "Build result: ${{ needs.build.result }}"
        echo "MSRV result: ${{ needs.msrv.result }}"
        if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.lint.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
          echo "❌ Critical jobs failed!"
          exit 1
        else
          echo "✅ All critical jobs passed!"
        fi