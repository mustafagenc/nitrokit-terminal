name: Rust CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y git pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install git

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose --all-features

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run tests with ignored tests
      run: cargo test --verbose --all-features -- --ignored

    - name: Run integration tests
      run: cargo test --verbose --test '*'

    - name: Check documentation
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo doc --no-deps --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: llvm-tools-preview

    - name: Install grcov
      run: cargo install grcov

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git pkg-config libssl-dev

    - name: Run tests with coverage
      env:
        RUSTFLAGS: -Cinstrument-coverage
        LLVM_PROFILE_FILE: nitrokit-%p-%m.profraw
      run: cargo test --verbose

    - name: Generate coverage report
      run: |
        grcov . \
          --binary-path ./target/debug/ \
          --source-dir . \
          --output-type lcov \
          --branch \
          --ignore-not-existing \
          --ignore "/*" \
          --ignore "target/*" \
          --ignore "tests/*" \
          --output-path coverage.lcov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.lcov
        flags: unittests
        name: nitrokit-coverage

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git pkg-config libssl-dev

    - name: Run benchmarks
      run: cargo bench --verbose

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git pkg-config libssl-dev

    - name: Check if project builds in release mode
      run: cargo build --release --verbose

    - name: Check package
      run: cargo package --verbose

    - name: Dry run publish
      run: cargo publish --dry-run --verbose

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain (MSRV)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.70.0  # Minimum supported version
        profile: minimal
        override: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git pkg-config libssl-dev

    - name: Check build with MSRV
      run: cargo build --verbose

    - name: Check tests with MSRV
      run: cargo test --verbose

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security, coverage]
    if: always()
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.security.result == 'success'
      run: echo "✅ All tests passed successfully!"

    - name: Notify failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        exit 1