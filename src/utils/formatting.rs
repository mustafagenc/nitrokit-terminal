use chrono::{DateTime, Utc};
use colored::*;

pub fn format_date(timestamp: i64) -> String {
    let dt = DateTime::<Utc>::from_timestamp(timestamp, 0);
    match dt {
        Some(date) => date.format("%Y-%m-%d %H:%M:%S UTC").to_string(),
        None => "Invalid date".to_string(),
    }
}

pub fn format_commit_type(message: &str) -> ColoredString {
    if message.starts_with("feat") {
        "✨ Feature".green().bold()
    } else if message.starts_with("fix") {
        "🐛 Fix".red().bold()
    } else if message.starts_with("docs") {
        "📚 Documentation".blue().bold()
    } else if message.starts_with("style") {
        "💄 Style".magenta().bold()
    } else if message.starts_with("refactor") {
        "♻️ Refactor".yellow().bold()
    } else if message.starts_with("test") {
        "🧪 Test".cyan().bold()
    } else if message.starts_with("chore") {
        "🔧 Chore".white().bold()
    } else {
        "📝 Other".normal()
    }
}

pub fn format_release_notes_markdown(version: &str, commits: &[String]) -> String {
    let mut output = String::new();
    
    output.push_str(&format!("# Release Notes - v{}\n\n", version));
    output.push_str(&format!("**Release Date:** {}\n\n", 
        chrono::Utc::now().format("%Y-%m-%d")));
    
    output.push_str("## Changes\n\n");
    
    for commit in commits {
        output.push_str(&format!("- {}\n", commit));
    }
    
    output.push_str("\n---\n\n");
    output.push_str("Generated by Nitrokit 🚀\n");
    
    output
}